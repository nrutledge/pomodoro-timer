{"version":3,"sources":["components/LengthControls/LengthControls.js","components/TimeDisplay/TimeDisplay.js","components/PomodoroTimer/PomodoroTimer.js","components/App/App.js","serviceWorker.js","index.js"],"names":["LengthControls_LengthControls","props","react_default","a","createElement","className","id","labelId","label","decrementId","onClick","decrementAction","lengthId","length","incrementId","incrementAction","TimeDisplay_TimeDisplay","isBreak","time","PomodoroTimer","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","tick","setTimeout","state","isRunning","setState","secondsRemaining","toggleTimer","toggleBreak","setTimeRemaining","minutesRemaining","resetTimer","breakLength","defaultBreakLength","sessionLength","defaultsessionLength","stopBeep","getFormattedTime","minutes","Math","floor","seconds","toString","padStart","playBeep","refs","beep","play","pause","currentTime","_setLength","stateToUpdate","isRelative","arguments","undefined","newLength","newState","increaseBreakLength","decreaseBreakLength","increaseSessionLength","decreaseSessionLength","_","prevState","newSessionLength","ref","src","preload","Component","App","class","PomodoroTimer_PomodoroTimer_PomodoroTimer","Boolean","window","location","hostname","match","ReactDOM","render","components_App_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.71dcade7.chunk.js","sourcesContent":["import React from 'react';\nimport './LengthControls.scss';\n\nexport default (props) => {\n  return (\n    <div className=\"length-controls\">\n      <h2 className=\"length-controls__h2\" id={props.labelId}>{props.label}</h2>\n      <div className=\"length-controls__container\">\n        <button className=\"length-controls__btn\" id={props.decrementId} onClick={props.decrementAction}>-</button>\n        <div className=\"length-controls__length\" id={props.lengthId}>{props.length}</div>\n        <button className=\"length-controls__btn\" id={props.incrementId} onClick={props.incrementAction}>+</button>\n      </div>\n    </div>\n  )\n}","import React from 'react';\nimport './TimeDisplay.scss';\n\nexport default (props) => {\n  const label = props.isBreak ? 'Break' : 'Session';\n  return (\n    <div className=\"time-display\">\n      <div className=\"time-display__label\" id='timer-label'>{label}</div>\n      <div className=\"time-display__time\" id='time-left'>{props.time}</div>\n    </div>\n  );\n}","import React, { Component } from 'react';\nimport LengthControls from '../LengthControls/LengthControls';\nimport TimeDisplay from '../TimeDisplay/TimeDisplay';\nimport './PomodoroTimer.scss';\n\nexport default class PomodoroTimer extends Component {\n  constructor(props) {\n    super();\n    this.state = {\n      defaultBreakLength: props.breakLength || 5,\n      breakLength: props.breakLength || 5,\n      defaultsessionLength: props.sessionLength || 25,\n      sessionLength: props.sessionLength || 25,\n      secondsRemaining: props.sessionLength * 60 || 25 * 60,\n      isRunning: false,\n      isBreak: false,\n    }\n  }\n\n  componentDidUpdate(_, prevState) {\n    if (this.state.isRunning) {\n      // Start the ticking if timer has been started\n      if (this.state.isRunning !== prevState.isRunning) {\n        this.tick();\n      }\n      \n      if (this.state.secondsRemaining === 0) {\n        this.refs.beep.play();\n      }\n\n      // Switch modes after timer reaches 0\n      if (this.state.secondsRemaining < 0) {\n        const newSessionLength = this.state.isBreak ? \n          this.state.sessionLength : this.state.breakLength;\n        \n        this.setTimeRemaining(newSessionLength);\n        this.toggleBreak();\n      }\n    } else {\n      // Change timer display if session length is updated (unless running)\n      if (this.state.sessionLength !== prevState.sessionLength) {\n        this.setTimeRemaining(this.state.sessionLength);\n      }\n    }\n  }\n\n  tick = () => {\n    setTimeout(() => {\n      if (!this.state.isRunning) { return; }\n      this.setState(state => {\n        return { secondsRemaining: state.secondsRemaining - 1 };\n      });\n      this.tick();\n    }, 1000)\n  }\n\n  toggleTimer = () => {\n    this.setState({ isRunning: !this.state.isRunning });\n  }\n\n  toggleBreak = () => {\n    this.setState({ isBreak: !this.state.isBreak });\n  }\n\n  setTimeRemaining = (minutesRemaining) => {\n    this.setState(state => {\n      return { secondsRemaining: minutesRemaining * 60 };\n    });\n  }\n\n  resetTimer = () => {\n    this.setState({\n      breakLength: this.state.defaultBreakLength,\n      sessionLength: this.state.defaultsessionLength,\n      secondsRemaining: this.state.defaultsessionLength * 60,\n      isRunning: false,\n      isBreak: false\n    });\n\n    this.stopBeep();\n  }\n\n  getFormattedTime = () => {\n    const minutes = (Math.floor(this.state.secondsRemaining / 60));\n    const seconds = (this.state.secondsRemaining % 60)\n    const paddedMinutes = minutes.toString().padStart(2, '0');\n    const paddedSeconds = seconds.toString().padStart(2, '0');\n\n    return paddedMinutes + ':' + paddedSeconds;\n  }\n\n  playBeep = () => {\n    this.refs.beep.play();\n  }\n\n  stopBeep = () => {\n    this.refs.beep.pause();\n    this.refs.beep.currentTime = 0;\n  }\n\n  _setLength = (stateToUpdate, length, isRelative = true) => () => {\n    this.setState(state => {\n      const newLength = isRelative? state[stateToUpdate] + length : length;\n      if (newLength <= 0 || newLength > 60) { return; }\n  \n      const newState = {};\n      newState[stateToUpdate] = newLength;\n      return newState;\n    });\n  }\n\n  increaseBreakLength = this._setLength('breakLength', 1);\n  decreaseBreakLength = this._setLength('breakLength', -1);\n  increaseSessionLength = this._setLength('sessionLength', 1);\n  decreaseSessionLength = this._setLength('sessionLength', -1);\n\n  render() {\n    return (\n      <div className=\"pomodoro-timer\">\n        <h1 className=\"pomodoro-timer__h1\">Pomodoro Timer</h1>  \n        <div className=\"pomodoro-timer__container\">\n          <div className=\"pomodoro-timer__controls\">\n            <LengthControls \n              label=\"Break Length\" \n              labelId=\"break-label\"\n              length={this.state.breakLength}\n              lengthId=\"break-length\"\n              incrementAction={this.increaseBreakLength}\n              incrementId={\"break-increment\"}\n              decrementAction={this.decreaseBreakLength}\n              decrementId={\"break-decrement\"}\n            />\n            <LengthControls \n              label=\"Session Length\" \n              labelId=\"session-label\"\n              length={this.state.sessionLength}\n              lengthId=\"session-length\"\n              incrementAction={this.increaseSessionLength}\n              incrementId={\"session-increment\"}\n              decrementAction={this.decreaseSessionLength}\n              decrementId={\"session-decrement\"}\n            />\n          </div>\n\n          <TimeDisplay time={this.getFormattedTime()} isBreak={this.state.isBreak} />\n          <button \n            className=\"pomodoro-timer__btn\" \n            id=\"start_stop\" \n            onClick={this.toggleTimer}>Start/Stop\n          </button>\n          <button \n            className=\"pomodoro-timer__btn pomodoro-timer__btn--reset\" \n            id=\"reset\" \n            onClick={this.resetTimer}>Reset\n          </button>\n          <audio id=\"beep\" ref=\"beep\" src=\"./sounds/bell.wav\" preload=\"auto\"></audio>\n        </div>\n      </div>\n    )\n  }\n}","import React, { Component } from 'react';\nimport PomodoroTimer from '../PomodoroTimer/PomodoroTimer';\nimport './App.scss';\n\nclass App extends Component {\n  render() {\n    return (\n      <div class=\"app\">\n        <PomodoroTimer />\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './components/App/App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}